# vim: set autoindent expandtab shiftwidth=2 softtabstop=2
#

---
name: ((bosh_deployment))

releases:
# Despite having version set, CF seems to ignore this when it uploads them, so we have to use a specific URL
- name: cf
  url: "https://bosh.io/d/github.com/cloudfoundry/cf-release((cf_version_url_suffix))"
  version: ((cf_version))
- name: cflinuxfs2
  url: "https://bosh.io/d/github.com/cloudfoundry/cflinuxfs2-release((cflinuxfs2_version_url_suffix))"
  version: ((cflinuxfs2_version))
- name: cf-rabbitmq
  url: "https://bosh.io/d/github.com/pivotal-cf/cf-rabbitmq-release((cf_rabbitmq_version_url_suffix))"
  version: ((cf_rabbitmq_version))
- name: cf-rabbitmq-multitenant-broker
  url: "https://bosh.io/d/github.com/pivotal-cf/cf-rabbitmq-multitenant-broker-release((cf_rabbitmq_multitenant_broker_version_url_suffix))"
  version: ((cf_rabbitmq_multitenant_broker_version))
- name: cf-smoke-tests
  url: "https://bosh.io/d/github.com/cloudfoundry/cf-smoke-tests-release((cf_smoke_tests_version_url_suffix))"
  version: ((cf_smoke_tests_version))
- name: diego
  url: "https://bosh.io/d/github.com/cloudfoundry/diego-release((diego_version_url_suffix))"
  version: ((diego_version))
- name: garden-runc
  url: "https://bosh.io/d/github.com/cloudfoundry/garden-runc-release((garden_runc_version_url_suffix))"
  version: ((garden_runc_version))
- name: postgresql-databases
  version: latest

stemcells:
- alias: default
  os: ubuntu-trusty
  version: latest

update:
  canaries: 1
  max_in_flight: 1
  serial: false
  canary_watch_time: 30000-600000
  update_watch_time: 5000-600000

jobs:
# https://github.com/cloudfoundry/bosh/issues/1639
- name: backup-postgresql-databases-cf
  instances: 1
  lifecycle: errand
  vm_type: ((postgresql_backup_vm_type))
  stemcell: default
  networks:
  - name: cf_private
  azs: [az1]
  templates:
  - {name: database-backup, release: postgresql-databases}
  properties:
    s3_config:
      bucket_name: ((backup_bucket))
      credentials_source: env_or_profile
      region: ((aws_region))
    postgresql_databases:
    - name: cloudfoundry
      postgresql_host: ((cf_db_dns))
      postgresql_port: ((cf_db_port))
      # We don't backup the Diego/BBS db as this should only contain the current VM deployment state
      databases:
      - { name: ccdb, username: ccadmin, password: ((cc_db_password)) }
      - { name: uaadb, username: uaaadmin, password: ((uaa_db_password)) }

- name: rabbitmq-broker-registrar
  instances: 1
  lifecycle: errand
  vm_type: ((rabbitmq-broker-registrar_vm_type))
  stemcell: default
  networks:
  - name: cf_private
  azs: [az1]
  templates:
  - {name: broker-registrar, release: cf-rabbitmq-multitenant-broker}
  properties:
    broker:
      service:
        name: rabbitmq
      name: rabbitmq
      protocol: https
      host: rabbitmq-broker.system.((domain_name))
      username: rabbitmq-broker
      password: ((rabbitmq_broker_password))

- name: rabbitmq-broker-deregistrar
  instances: 1
  lifecycle: errand
  vm_type: ((rabbitmq-broker-deregistrar_vm_type))
  stemcell: default
  networks:
  - name: cf_private
  azs: [az1]
  templates:
  - {name: broker-deregistrar, release: cf-rabbitmq-multitenant-broker}
  properties:
    broker:
      service:
        name: rabbitmq
      name: rabbitmq

- name: rabbitmq-broker-smoke-tests-az1
  instances: 1
  lifecycle: errand
  vm_type: ((rabbitmq-broker-smoke-tests-az1_vm_type))
  stemcell: default
  networks:
  - name: cf_private
  azs: [az1]
  templates:
  - {name: smoke-tests, release: cf-rabbitmq-multitenant-broker}
  properties:
    broker:
      name: rabbitmq

- name: cf-smoke-tests-az1
  instances: 1
  lifecycle: errand
  stemcell: default
  vm_type: micro_general
  networks:
  - name: cf_private
  azs: [az1]
  templates:
  - {name: smoke_tests, release: cf-smoke-tests}
  properties:
    smoke_tests:
      etcd_ip_address: ((etcd_az1_ip1))

- name: nats
  instances: ((nats_instances))
  azs: ((nats_azs))
  vm_type: ((nats_vm_type))
  stemcell: default
  templates:
  - {name: metron_agent, release: cf}
  - {name: nats, release: cf}
  networks:
  - name: cf_private
    static_ips: ((nats_static_ips))
  properties:
    metron_agent:
      zone: z1

- name: etcd
  instances: ((etcd_instances))
  azs: ((etcd_azs))
  vm_type: ((etcd_vm_type))
  stemcell: default
  persistent_disk: 10240
  templates:
  - {name: consul_agent, release: cf, consumes: {consul_client: {from: consul_client_link}, consul_server: nil, consul_common: {from: consul_common_link}}}
  - {name: etcd, release: cf}
  - {name: metron_agent, release: cf}
  networks:
  - name: cf_private
    static_ips: ((etcd_static_ips))
  properties:
    metron_agent:
      zone: z1
    consul:
      agent:
        services:
          etcd:
            name: cf-etcd

- name: consul
  instances: ((consul_instances))
  azs: ((consul_azs))
  persistent_disk: 1024
  vm_type: ((consul_vm_type))
  stemcell: default
  templates:
  - name: consul_agent
    release: cf
    consumes:
      consul_client: {from: consul_client_link}
      consul_server: {from: consul_server_link}
      consul_common: {from: consul_common_link}
    provides:
      consul_common: {as: consul_common_link, shared: true}
      consul_server: {as: consul_server_link, shared: true}
      consul_client: {as: consul_client_link, shared: true}
  - {name: metron_agent, release: cf}
  networks:
  - name: cf_private
    static_ips: ((consul_static_ips))
  properties:
    metron_agent:
      zone: z1
    consul:
      agent:
        mode: server

#- name: postgres
#  #instances: 1
#  instances: ((required_non_cf_rds_postgres_instances))
#  azs: [az1]
#  persistent_disk: 10240
#  vm_type: medium_general
#  stemcell: default
#  templates:
#  - {name: consul_agent, release: cf, consumes: {consul_client: {from: consul_client_link}, consul_server: nil, consul_common: {from: consul_common_link}}}
#  - {name: metron_agent, release: cf}
#  - {name: postgres, release: cf}
#  networks:
#  - name: cf_private
#    static_ips: [((private_az1_cidr_prefix)).201]
#  update:
#    serial: true
#  properties:
#    metron_agent:
#      zone: z1

- name: ssh_proxy
  instances: ((ssh_proxy_instances))
  azs: ((ssh_proxy_azs))
  vm_type: ((ssh_proxy_vm_type))
  stemcell: default
  templates:
  - {name: consul_agent, release: cf, consumes: {consul_client: {from: consul_client_link}, consul_server: nil, consul_common: {from: consul_common_link}}}
  - {name: metron_agent, release: cf}
  - {name: ssh_proxy, release: diego}
  networks:
  - name: cf_private
  properties:
    metron_agent:
      zone: z1

- name: diego_cell
  instances: ((diego_cell_instances))
  azs: ((diego_cell_azs))
  vm_type: ((diego_cell_vm_type))
  stemcell: default
  templates:
  - {name: cflinuxfs2-rootfs-setup, release: cflinuxfs2}
  - {name: consul_agent, release: cf, consumes: {consul_client: {from: consul_client_link}, consul_server: nil, consul_common: {from: consul_common_link}}}
  - {name: garden, release: garden-runc}
  - {name: metron_agent, release: cf}
  - {name: rep, release: diego}
  networks:
  - name: cf_private
  update:
    serial: true
    max_in_flight: 1
  properties:
    metron_agent:
      zone: z1
    diego:
      rep:
        zone: z1

#- name: diego_cell_large_spot
#  instances: 0
#  azs: [az1]
#  vm_type: large_ram_large_disk_spot
#  stemcell: default
#  templates:
#  - {name: cflinuxfs2-rootfs-setup, release: cflinuxfs2}
#  - {name: consul_agent, release: cf, consumes: {consul_client: {from: consul_client_link}, consul_server: nil, consul_common: {from: consul_common_link}}}
#  - {name: garden, release: garden-runc}
#  - {name: metron_agent, release: cf}
#  - {name: rep, release: diego}
#  networks:
#  - name: cf_private
#  update:
#    serial: true
#    max_in_flight: 1
#  properties:
#    metron_agent:
#      zone: z1
#    diego:
#      rep:
#        zone: z1

- name: diego_brain
  instances: ((diego_brain_instances))
  azs: ((diego_brain_azs))
  vm_type: ((diego_brain_vm_type))
  stemcell: default
  templates:
  - {name: auctioneer, release: diego}
  - {name: bbs, release: diego}
  - {name: cc_uploader, release: cf}
  - {name: consul_agent, release: cf, consumes: {consul_client: {from: consul_client_link}, consul_server: nil, consul_common: {from: consul_common_link}}}
  - {name: file_server, release: diego}
  - {name: metron_agent, release: cf}
  - {name: nsync, release: cf}
  - {name: route_emitter, release: diego}
  - {name: stager, release: cf}
  - {name: tps, release: cf}
  persistent_disk: 20480
  networks:
  - name: cf_private
  update:
    serial: true
    max_in_flight: 1
  properties:
    metron_agent:
      zone: z1
    consul:
      agent:
        services: {}

- name: api
  instances: ((api_instances))
  azs: ((api_azs))
  vm_type: ((api_vm_type))
  stemcell: default
  templates:
  - {name: cloud_controller_clock, release: cf}
  - {name: cloud_controller_ng, release: cf}
  - {name: cloud_controller_worker, release: cf}
  - {name: consul_agent, release: cf, consumes: {consul_client: {from: consul_client_link}, consul_server: nil, consul_common: {from: consul_common_link}}}
  - {name: go-buildpack, release: cf}
  - {name: metron_agent, release: cf}
  - {name: route_registrar, release: cf}
  - {name: statsd_injector, release: cf}
  # Buildpacks - delete these for internal
  - {name: binary-buildpack, release: cf}
  - {name: dotnet-core-buildpack, release: cf}
  - {name: java-buildpack, release: cf}
  - {name: nodejs-buildpack, release: cf}
  - {name: php-buildpack, release: cf}
  - {name: python-buildpack, release: cf}
  - {name: ruby-buildpack, release: cf}
  - {name: staticfile-buildpack, release: cf}
  networks:
  - name: cf_private
  properties:
    metron_agent:
      zone: z1
    consul:
      agent:
        services:
          cloud_controller_ng: {}
    route_registrar:
      routes:
      - name: api
        registration_interval: 20s
        port: 9022
        tags:
          component: CloudController
        uris:
        - "api.system.((domain_name))"
        health_check:
          name: api-health-check
          script_path: "/var/vcap/jobs/cloud_controller_ng/bin/cloud_controller_ng_health_check"
          timeout: 3s

- name: doppler
  instances: ((doppler_instances))
  azs: ((doppler_azs))
  vm_type: ((doppler_vm_type))
  stemcell: default
  templates:
  - {name: consul_agent, release: cf, consumes: {consul_client: {from: consul_client_link}, consul_server: nil, consul_common: {from: consul_common_link}}}
  - {name: doppler, release: cf}
  - {name: metron_agent, release: cf}
  - {name: syslog_drain_binder, release: cf}
  networks:
  - name: cf_private
    static_ips: ((doppler_static_ips))
  properties:
    metron_agent:
      zone: z1
    doppler:
      zone: z1
    consul:
      agent:
        services:
          doppler: {}

- name: loggregator_trafficcontroller
  instances: ((loggregator_trafficcontroller_instances))
  azs: ((loggregator_trafficcontroller_azs))
  vm_type: ((loggregator_trafficcontroller_vm_type))
  stemcell: default
  templates:
  - {name: consul_agent, release: cf, consumes: {consul_client: {from: consul_client_link}, consul_server: nil, consul_common: {from: consul_common_link}}}
  - {name: loggregator_trafficcontroller, release: cf}
  - {name: metron_agent, release: cf}
  - {name: route_registrar, release: cf}
  networks:
  - name: cf_private
  properties:
    metron_agent:
      zone: z1
    traffic_controller: {zone: z1}
    route_registrar:
      routes:
      - name: doppler
        registration_interval: 20s
        port: 8081
        uris:
        - "doppler.system.((domain_name))"
      - name: loggregator
        registration_interval: 20s
        port: 8080
        uris:
        - "loggregator.system.((domain_name))"
    consul:
      agent:
        services:
          loggregator_trafficcontroller: {}

- name: uaa
  instances: ((uaa_instances))
  azs: ((uaa_azs))
  vm_type: ((uaa_vm_type))
  stemcell: default
  templates:
  - {name: consul_agent, release: cf, consumes: {consul_client: {from: consul_client_link}, consul_server: nil, consul_common: {from: consul_common_link}}}
  - {name: metron_agent, release: cf}
  - {name: route_registrar, release: cf}
  - {name: statsd_injector, release: cf}
  - {name: uaa, release: cf}
  networks:
  - name: cf_private
  properties:
    metron_agent:
      zone: z1
    consul:
      agent:
        services:
          uaa: {}
    login:
      prompt:
        username:
          text: Username
        #password:
        #  text: Password
      saml:
        serviceProviderKey: ((uaa_login_saml.private_key))
        serviceProviderCertificate: ((uaa_login_saml.certificate))
      catalina_opts: -Xmx768m -XX:MaxPermSize=256m
    route_registrar:
      routes:
      - name: uaa
        registration_interval: 20s
        port: 8080
        uris:
        - "uaa.system.((domain_name))"
        - "*.uaa.system.((domain_name))"
        - "login.system.((domain_name))"
        - "*.login.system.((domain_name))"
    uaa:
      url: https://uaa.system.((domain_name))
      admin:
        client_secret: ((uaa_admin_client_secret))
      batch:
        password: ((uaa_batch_password))
        username: batch_user
      cc:
        client_secret: ((uaa_cc_client_secret))
      cf_admin:
        client_secret: ((uaa_cf_admin_secret))

- name: router
  instances: ((router_instances))
  azs: ((router_azs))
  vm_type: ((router_vm_type))
  stemcell: default
  templates:
  - {name: consul_agent, release: cf, consumes: {consul_client: {from: consul_client_link}, consul_server: nil, consul_common: {from: consul_common_link}}}
  - {name: gorouter, release: cf}
  - {name: metron_agent, release: cf}
  networks:
  - name: cf_private
  #  static_ips:
  #  - ((router_az1_ip1))
  #  - ((router_az2_ip1))
  properties:
    metron_agent:
      zone: z1
    dropsonde: {enabled: true}

- name: rabbitmq-mgnt
  instances: ((rabbitmq-mgnt_instances))
  azs: ((rabbitmq-mgnt_azs))
  vm_type: ((rabbitmq-mgnt_vm_type))
  stemcell: default
  templates:
  - {name: consul_agent, release: cf, consumes: {consul_client: {from: consul_client_link}, consul_server: nil, consul_common: {from: consul_common_link}}}
  - {name: metron_agent, release: cf}
  - {name: rabbitmq-haproxy, release: cf-rabbitmq}
  - {name: route_registrar, release: cf}
  networks:
  - name: cf_rabbitmq
  properties:
    route_registrar:
      routes:
      - name: rabbitmq-mgnt
        port: 15672
        registration_interval: 20s
        uris:
        - rabbitmq-mgnt.system.((domain_name))
    consul:
      agent:
        services: {}

- name: rabbitmq-broker
  instances: ((rabbitmq-broker_instances))
  azs: ((rabbitmq-broker_azs))
  vm_type: ((rabbitmq-broker_vm_type))
  stemcell: default
  persistent_disk: 10240
  networks:
  - name: cf_rabbitmq
  templates:
  - {name: consul_agent, release: cf, consumes: {consul_client: {from: consul_client_link}, consul_server: nil, consul_common: {from: consul_common_link}}}
  - {name: metron_agent, release: cf}
  - {name: rabbitmq-broker, release: cf-rabbitmq-multitenant-broker}
  - {name: route_registrar, release: cf}
  properties:
    route_registrar:
      routes:
      - name: rabbitmq-broker
        port: 4567
        registration_interval: 20s
        uris:
        - rabbitmq-broker.system.((domain_name))

- name: rabbitmq-node
  instances: ((rabbitmq-node_instances))
  azs: ((rabbitmq-node_azs))
  vm_type: ((rabbitmq-node_vm_type))
  stemcell: default
  persistent_disk: 10240
  templates:
  - {name: consul_agent, release: cf, consumes: {consul_client: {from: consul_client_link}, consul_server: nil, consul_common: {from: consul_common_link}}}
  - {name: metron_agent, release: cf}
  - {name: rabbitmq-server, release: cf-rabbitmq}
  networks:
  - name: cf_rabbitmq
  properties:
    consul:
      agent:
        services: {}

properties:
  router:
    enable_ssl: true
    tls_pem:
      - cert_chain: ((router_ssl.certificate))
        private_key: ((router_ssl.private_key))
    status:
      user: router-status
      password: ((router_status_password))
    route_services_secret: ((router_route_services_secret))
    tracing:
      enable_zipkin: true
  networks: {apps: cf_private}
  app_domains: [apps.((domain_name))]
  app_ssh:
    host_key_fingerprint: ((diego_ssh_proxy_host_key.public_key_fingerprint))
    oauth_client_id: ssh-proxy
  cc:
    disable_custom_buildpacks: true
    maximum_app_disk_in_mb: 8192
    mutual_tls:
      ca_cert: ((cc_tls.ca))
      public_cert: ((cc_tls.certificate))
      private_key: ((cc_tls.private_key))
    allow_app_ssh_access: true
    default_to_diego_backend: true
    default_app_memory: 64
    default_app_disk_in_mb: 512
    internal_api_user: internal_user
    external_port: 9022
    tls_port: 9023
    internal_service_hostname: cloud-controller-ng.service.cf.internal
    bulk_api_password: ((bulk_api_password))
    db_encryption_key: ((db_encryption_secret))
    # public_networks for a running instance should be restricted to the bare essentials (eg Git repo server for Jenkins installs)
    default_running_security_groups: [dns, public_networks, postgres_networks, rabbitmq_networks, redis_networks]
    default_staging_security_groups: [dns, public_networks]
    # The buildpacks can, sometimes, be quite slow to download and install, so we list the ones that are used during deployment first - hopefully,
    # the order is respected
    install_buildpacks:
    - {name: staticfile_buildpack, package: staticfile-buildpack}
    - {name: python_buildpack, package: python-buildpack}
    - {name: nodejs_buildpack, package: nodejs-buildpack}
    - {name: go_buildpack, package: go-buildpack}
    - {name: java_buildpack, package: java-buildpack}
    - {name: ruby_buildpack, package: ruby-buildpack}
    - {name: php_buildpack, package: php-buildpack}
    - {name: dotnet_core_buildpack, package: dotnet-core-buildpack}
    - {name: binary_buildpack, package: binary-buildpack}
    internal_api_password: ((internal_api_password))
    quota_definitions:
      default:
        memory_limit: 102400
        non_basic_services_allowed: true
        total_routes: 1000
        total_services: -1
    security_group_definitions:
    - name: dns
      rules:
      - {destination: 0.0.0.0/0, ports: '53', protocol: tcp}
      - {destination: 0.0.0.0/0, ports: '53', protocol: udp}
    - name: public_networks
      rules:
      - {destination: 0.0.0.0-9.255.255.255, protocol: all}
      - {destination: 11.0.0.0-169.253.255.255, protocol: all}
      - {destination: 169.255.0.0-172.15.255.255, protocol: all}
      - {destination: 172.32.0.0-192.167.255.255, protocol: all}
      - {destination: 192.169.0.0-255.255.255.255, protocol: all}
    # XXX XXX XXX XXX XXX
    - name: postgres_networks
      rules:
      - {destination: ((rds_az1_cidr)), ports: '5432', protocol: tcp}
      - {destination: ((rds_az2_cidr)), ports: '5432', protocol: tcp}
    # XXX XXX XXX XXX XXX
    - name: rabbitmq_networks
      rules: ((rabbitmq_network_rules))
    # XXX XXX XXX XXX XXX
    - name: redis_networks
      rules:
      - {destination: ((elasti_cache_az1_cidr)), ports: '6379', protocol: tcp}
      - {destination: ((elasti_cache_az2_cidr)), ports: '6379', protocol: tcp}
    # XXX XXX XXX XXX XXX
    staging_upload_password: ((staging_upload_password))
    staging_upload_user: staging_upload_user
  ccdb:
    db_scheme: postgres
    address: ((cf_db_dns))
    port: ((cf_db_port))
    databases:
    - {name: ccdb, tag: cc}
    roles:
    - {name: ccadmin, password: ((cc_db_password)), tag: admin}
  # Temporary until manifests have been adjusted to support Locket
  cell_registrations:
    locket:
      enabled: false
  consul:
    agent:
      log_level: null
      domain: cf.internal
      servers:
        lan: ((consul_static_ips))
    encrypt_keys:
    - ((consul_encrypt_keys_secret))
    ca_cert: ((consul_agent.ca))
    server_cert: ((consul_server.certificate))
    server_key: ((consul_server.private_key))
    agent_cert: ((consul_agent.certificate))
    agent_key: ((consul_agent.private_key))
  #databases:
  #  # RDS require uuid-ossp, pgcrypto, and citext
  #  # Apps RDS requires pgcrypto
  #  databases:
  #  - {name: ccdb, tag: cc, citext: true}
  #  - {name: uaadb, tag: uaa, citext: true}
  #  - {name: diego, tag: diego, citext: true}
  #  port: ((cf_db_port))
  #  roles:
  #  - {name: ccadmin, password: ((cc_db_password)), tag: admin}
  #  - {name: uaaadmin, password: ((uaa_db_password)), tag: admin}
  #  - {name: diego, password: ((diego_db_password)), tag: admin}
  name: ((bosh_deployment))
  description: Cloud Foundry - ((organisation))
  domain: system.((domain_name))
  etcd:
    advertise_urls_dns_suffix: cf-etcd.service.cf.internal
    machines: ["cf-etcd.service.cf.internal"]
    peer_require_ssl: true
    require_ssl: true
    ca_cert: ((etcd_server.ca))
    client_cert: ((etcd_client.certificate))
    client_key: ((etcd_client.private_key))
    server_cert: ((etcd_server.certificate))
    server_key: ((etcd_server.private_key))
    peer_ca_cert: ((etcd_server.ca))
    peer_cert: ((etcd_server.certificate))
    peer_key: ((etcd_server.private_key))
  doppler:
    # Number of log messages to retain per application
    maxRetainedLogMessages: 2000
    # Size of the internal buffer used by doppler to store messages for output to firehose or ‘cf logs’. If the buffer gets full doppler will drop the messages
    message_drain_buffer_size: 20000
    etcd:
      client_cert: ((etcd_client.certificate))
      client_key: ((etcd_client.private_key))
  traffic_controller:
    etcd:
      client_cert: ((etcd_client.certificate))
      client_key: ((etcd_client.private_key))
  syslog_drain_binder:
    etcd:
      client_cert: ((etcd_client.certificate))
      client_key: ((etcd_client.private_key))
  tls:
    ca_cert: ((diego_rep_agent.ca))
    cert: ((diego_rep_agent.certificate))
    key: ((diego_rep_agent.private_key))
  loggregator:
    use_v2_api: true
    ca_cert: ((loggregator_tls_metron.ca))
    cert: ((loggregator_tls_metron.certificate))
    key: ((loggregator_tls_metron.private_key))
    uaa:
      client_secret: ((uaa_doppler_client_secret))
    etcd:
      require_ssl: true
      machines: ["cf-etcd.service.cf.internal"]
      ca_cert: ((etcd_server.ca))
    tls:
      ca_cert: ((loggregator_ca.certificate))
      doppler:
        cert: ((loggregator_tls_doppler.certificate))
        key: ((loggregator_tls_doppler.private_key))
      trafficcontroller:
        cert: ((loggregator_tls_tc.certificate))
        key: ((loggregator_tls_tc.private_key))
      cc_trafficcontroller:
        cert: ((loggregator_tls_cc_tc.certificate))
        key: ((loggregator_tls_cc_tc.private_key))
      metron:
        cert: ((loggregator_tls_metron.certificate))
        key: ((loggregator_tls_metron.private_key))
      syslogdrainbinder:
        cert: ((loggregator_tls_syslogdrainbinder.certificate))
        key: ((loggregator_tls_syslogdrainbinder.private_key))
      statsd_injector:
        cert: ((loggregator_tls_statsdinjector.certificate))
        key: ((loggregator_tls_statsdinjector.private_key))
  doppler_endpoint:
    shared_secret: ((doppler_shared_secret))
  loggregator_endpoint:
    shared_secret: ((doppler_shared_secret))
  metron_endpoint:
    shared_secret: ((doppler_shared_secret))
  metron_agent:
    deployment: ((deployment_name))
  nats:
    machines: ((nats_static_ips))
    password: ((nats_password))
    port: 4222
    user: nats
  ssl:
    skip_cert_verify: false
  system_domain: system.((domain_name))
  system_domain_organization: ((organisation))
  login:
    branding:
      company_name: ((organisation))
    smtp: {}
  uaa:
    clients:
      cc-service-dashboards:
        authorities: clients.read,clients.write,clients.admin
        authorized-grant-types: client_credentials
        scope: openid,cloud_controller_service_permissions.read
        secret: ((uaa_cc_service_dashboard_client_secret))
      cc_routing:
        authorities: routing.router_groups.read
        secret: ((uaa_cc_routing_client_secret))
        authorized-grant-types: client_credentials
      cc_service_key_client:
        authorities: credhub.read,credhub.write
        secret: ((uaa_cc_service_key_client_secret))
        authorized-grant-types: client_credentials
      cf:
        access-token-validity: 600
        authorities: uaa.none
        authorized-grant-types: password,refresh_token
        autoapprove: true
        secret: ''
        override: true
        refresh-token-validity: 604800
        scope: cloud_controller.read,cloud_controller.write,openid,password.write,cloud_controller.admin,scim.read,scim.write,doppler.firehose,uaa.user,routing.router_groups.read
      cf-services:
        authorities: uaa.resource,oauth.service,clients.read,clients.write,clients.secret
        authorized-grant-types: client_credentials,implicit
        redirect-uri: https://login.system.((domain_name))/login
        secret: ((uaa_cf_services_secret))
        override: true
        scope: openid,cloud_controller.read,cloud_controller.write
      cloud_controller_username_lookup:
        authorities: scim.userids
        authorized-grant-types: client_credentials
        secret: ((uaa_cc_username_lookup_client_secret))
      doppler:
        authorities: uaa.resource
        authorized-grant-types: client_credentials
        secret: ((uaa_doppler_client_secret))
      gorouter:
        authorities: routing.routes.read
        authorized-grant-types: client_credentials
        secret: ((uaa_go_router_client_secret))
      login:
        authorities: oauth.login,scim.write,clients.read,notifications.write,critical_notifications.write,emails.write,scim.userids,password.write
        authorized-grant-types: authorization_code,client_credentials,refresh_token
        redirect-uri: https://login.system.((domain_name))/login
        scope: openid,oauth.approvals
        secret: ((uaa_login_client_secret))
      ssh-proxy:
        authorized-grant-types: authorization_code
        autoapprove: true
        override: true
        redirect-uri: https://login.system.((domain_name))/login
        scope: openid,cloud_controller.read,cloud_controller.write,cloud_controller.admin
        secret: ((uaa_ssh_proxy_secret))
      tcp_emitter:
        authorities: routing.routes.write,routing.routes.read
        authorized-grant-types: client_credentials
        secret: ((uaa_tcp_emitter_client_secret))
      tcp_router:
        authorities: routing.routes.read
        authorized-grant-types: client_credentials
        secret: ((uaa_tcp_router_client_secret))
        scope:
    scim:
      userids_enabled: true
      users:
      - name: admin
        password: ((admin_password))
        groups:
        - scim.write
        - scim.read
        - openid
        - cloud_controller.admin
        - clients.read
        - clients.write
        - doppler.firehose
        - routing.router_groups.read
        - routing.router_groups.write
      - name: cf_admin
        password: ((cf_admin_password))
        # May need to add more permissions
        groups:
        - cloud_controller.admin
        - uaa.admin
        - scim.read
        - scim.write
      - name: smoke_tester
        password: ((smoke_tester_password))
        groups:
        - openid
        - cloud_controller.admin
    jwt:
      policy:
        active_key_id: key-id-1
        keys:
          key-id-1:
            signingKey: ((uaa_jwt_signing_key.private_key))
    zones:
      internal:
        hostnames:
        - uaa.service.cf.internal
        - login.service.cf.internal
    ssl:
      # Internal UAA port
      port: 8443
    # Should no longer be used in cf-release 272
    url: https://uaa.system.((domain_name))
    sslPrivateKey: ((uaa_ssl.private_key))
    sslCertificate: ((uaa_ssl.certificate))
    ca_cert: ((uaa_ssl.ca))
    password:
      policy:
        global:
          expirePasswordInMonths: 3
          maxLength: 255
          minLength: 8
          requireDigit: 1
          requireLowerCaseCharacter: 1
          requireSpecialCharacter: 1
          requireUpperCaseCharacter: 1
  uaadb:
    address: ((cf_db_dns))
    port: ((cf_db_port))
    db_scheme: postgresql
    databases:
    - {name: uaadb, tag: uaa}
    roles:
    - {name: uaaadmin, password: ((uaa_db_password)), tag: admin}
  capi:
    cc_uploader:
      mutual_tls:
        ca_cert: ((cc_bridge_cc_uploader_server.ca))
        server_cert: ((cc_bridge_cc_uploader_server.certificate))
        server_key: ((cc_bridge_cc_uploader_server.private_key))
      cc:
        ca_cert: ((cc_bridge_cc_uploader.ca))
        client_cert: ((cc_bridge_cc_uploader.certificate))
        client_key: ((cc_bridge_cc_uploader.private_key))
    nsync:
      bbs:
        ca_cert: ((bbs_nsync_client.ca))
        client_cert: ((bbs_nsync_client.certificate))
        client_key: ((bbs_nsync_client.private_key))
      cc:
        basic_auth_password: ((internal_api_password))
        base_url: http://cloud-controller-ng.service.cf.internal:9022
      diego_privileged_containers: true
    tps:
      bbs:
        ca_cert: ((diego_bbs_server.ca))
        client_cert: ((bbs_tps_client.certificate))
        client_key: ((bbs_tps_client.private_key))
      cc:
        ca_cert: ((cc_bridge_tps.ca))
        client_cert: ((cc_bridge_tps.certificate))
        client_key: ((cc_bridge_tps.private_key))
        basic_auth_password: ((internal_api_password))
    stager:
      # The default for this and diego.route_emitter.healthcheck_address is 127.0.0.1:17011 (2017/04/03)
      debug_addr: 127.0.0.1:17012
      bbs:
        ca_cert: ((diego_bbs_server.ca))
        client_cert: ((bbs_stager_client.certificate))
        client_key: ((bbs_stager_client.private_key))
      cc:
        basic_auth_password: ((internal_api_password))
  diego:
    auctioneer:
      bbs:
        ca_cert: ((bbs_diego_client.ca))
        client_cert: ((bbs_diego_client.certificate))
        client_key: ((bbs_diego_client.private_key))
      loggregator:
        ca_cert: ((loggregator_tls_metron.ca))
        cert: ((loggregator_tls_metron.certificate))
        key: ((loggregator_tls_metron.private_key))
      ca_cert: ((diego_auctioneer_server.ca))
      server_cert: ((diego_auctioneer_server.certificate))
      server_key: ((diego_auctioneer_server.private_key))
      rep:
        ca_cert: ((diego_bbs_server.ca))
        client_cert: ((bbs_rep_client.certificate))
        client_key: ((bbs_rep_client.private_key))
    bbs:
      ca_cert: ((diego_bbs_server.ca))
      client_cert: ((bbs_diego_client.certificate))
      client_key: ((bbs_diego_client.private_key))
      server_cert: ((diego_bbs_server.certificate))
      server_key: ((diego_bbs_server.private_key))
      auctioneer: &diego_auctioneer_client_properties
        ca_cert: ((bbs_auctioneer_client.ca))
        client_cert: ((bbs_auctioneer_client.certificate))
        client_key: ((bbs_auctioneer_client.private_key))
      active_key_label: active
      encryption_keys:
      - label: active
        passphrase: ((bbs_password))
      etcd:
        machines: ["cf-etcd.service.cf.internal"]
        ca_cert: ((etcd_server.ca))
        # clientName
        client_cert: ((etcd_client.certificate))
        client_key: ((etcd_client.private_key))
      rep:
        ca_cert: ((diego_bbs_server.ca))
        client_cert: ((bbs_rep_client.certificate))
        client_key: ((bbs_rep_client.private_key))
      sql:
        db_driver: postgres
        db_host: ((cf_db_dns))
        db_port: ((cf_db_port))
        db_schema: diego
        db_username: diego
        db_password: ((diego_db_password))
        max_open_connections: 50
    converger:
      bbs:
        ca_cert: ((bbs_converger_client.ca))
        client_cert: ((bbs_converger_client.certificate))
        client_key: ((bbs_converger_client.private_key))
    rep:
      bbs:
        ca_cert: ((diego_bbs_server.ca))
        client_cert: ((bbs_rep_client.certificate))
        client_key: ((bbs_rep_client.private_key))
      preloaded_rootfses: ["cflinuxfs2:/var/vcap/packages/cflinuxfs2/rootfs.tar"]
      ca_cert: ((diego_rep_agent.ca))
      server_cert: ((diego_rep_agent.certificate))
      server_key: ((diego_rep_agent.private_key))
      enable_legacy_api_endpoints: false
    executor:
      memory_capacity_mb: 30720
      disk_capacity_mb: 163840
    route_emitter:
      bbs:
        ca_cert: ((diego_bbs_server.ca))
        client_cert: ((bbs_routeemitter_client.certificate))
        client_key: ((bbs_routeemitter_client.private_key))
      nats:
        machines: ((nats_static_ips))
        password: ((nats_password))
        port: 4222
        user: nats
    ssh_proxy:
      bbs:
        ca_cert: ((diego_bbs_server.ca))
        client_cert: ((bbs_sshproxy_client.certificate))
        client_key: ((bbs_sshproxy_client.private_key))
      host_key: ((diego_ssh_proxy_host_key.private_key))
      enable_cf_auth: true
      enable_diego_auth: false
      uaa_secret: ((uaa_ssh_proxy_secret))
      uaa_token_url: https://uaa.system.((domain_name))/oauth/token
      uaa:
        port: 8443
        ca_cert: ((uaa_ssl.ca))
      healthcheck_listen_addr: 0.0.0.0:2223
      listen_addr: 0.0.0.0:2222
    ssl:
      skip_cert_verify: true
  garden:
    deny_networks:
    - 0.0.0.0/0
  cf:
    # This is used by the smoke tests, so should be the external URL
    api_url: https://api.system.((domain_name))
    domain: ((domain_name))
    admin_username: admin
    admin_password: ((admin_password))
  rabbitmq-broker:
    route: rabbitbroker
    #cc_endpoint: https://api.system.((domain_name))
    cc_endpoint: http://cloud-controller-ng.service.cf.internal:9022
    service:
      #name: ((rabbitmq_product_name))
      name: rabbitmq
      username: rabbitmq-broker
      password: ((rabbitmq_broker_password))
      url: http://rabbitmq-broker.system.((domain_name))
    rabbitmq:
      hosts: rabbitmq-node.service.cf.internal
      operator_set_policy:
        enabled: true
        policy_name: "operator_set_policy"
        policy_definition: "{\"ha-mode\":\"exactly\",\"ha-params\":2,\"ha-sync-mode\":\"automatic\"}"
        policy_priority: 50
      management_domain: rabbitmq-mgnt.system.((domain_name))
      ssl: true
      administrator:
        username: rabbitmq-broker
        password: ((rabbitmq_broker_password))
  rabbitmq-haproxy:
    ports:
    - 5671
    - 5672
    - 15672
    stats:
      username: rabbitmq-stats
      password: ((rabbitmq_stats_password))
  rabbitmq-server:
    plugins:
    - rabbitmq_management
    ports:
    - 5671
    - 5672
    - 15672
    administrators:
      management:
        username: rabbitmq-management
        password: ((rabbitmq_management_password))
      broker:
        username: rabbitmq-broker
        password: ((rabbitmq_broker_password))
    cluster_partition_handling: autoheal
    ssl:
      cert: ((rabbitmq_server.certificate))
      key: ((rabbitmq_server.private_key))
      cacert: ((rabbitmq_server.ca))
      verification_depth: 4
      ciphers:
      - ECDHE-ECDSA-AES256-GCM-SHA384
      - ECDHE-RSA-AES256-GCM-SHA384
      - ECDHE-ECDSA-AES256-SHA384
      - ECDHE-RSA-AES256-SHA384
      - ECDHE-ECDSA-DES-CBC3-SHA
      - ECDH-ECDSA-AES256-GCM-SHA384
      - ECDH-RSA-AES256-GCM-SHA384
      - ECDH-ECDSA-AES256-SHA384
      - ECDH-RSA-AES256-SHA384
      - DHE-DSS-AES256-GCM-SHA384
      - DHE-DSS-AES256-SHA256
      - AES256-GCM-SHA384
  smoke_tests:
    api: https://api.system.((domain_name))
    apps_domain: [apps.((domain_name))]
    user: smoke_tester
    password: ((smoke_tester_password))
    org: SmokeTest_Org
    space: SmokeTest_Space
    backend: diego
