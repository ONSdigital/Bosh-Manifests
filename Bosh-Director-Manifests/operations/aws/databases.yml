---
- type: replace
  path: /releases/name=postgresql-databases?
  value:
    name: postgresql-databases
    url: ((postgresql_databases_url))
    version: latest

- type: remove
  path: /instance_groups/name=bosh/jobs/name=postgres-9.4

- type: replace
  path: /instance_groups/name=bosh/jobs/-
  value:
    name: database-creation
    release: postgresql-databases

- type: replace
  path: /instance_groups/name=bosh/properties/director/db
  value:
    host: ((bosh_db_dns))
    port: ((bosh_db_port))
    user: bosh
    password: ((bosh_db_password))
    database: bosh
    adapter: postgres

- type: replace
  path: /instance_groups/name=bosh/properties/backup_destination?
  value:
    provider: s3
    options:
      s3_region: ((aws_region))
      credentials_source: env_or_profile
      bucket_name: ((director_backup_bucket))

- type: replace
  path: /instance_groups/name=bosh/properties/s3_config?
  value:
    bucket_name: ((backup_bucket))
    credentials_source: env_or_profile
    region: ((aws_region))

- type: replace
  path: /instance_groups/name=bosh/properties/postgresql_databases?
  value:
  - name: applications
    admin_username: ((apps_db_admin_username))
    admin_password: ((apps_db_admin_password))
    admin_database: postgres
    postgresql_host: ((apps_db_dns))
    postgresql_port: ((apps_db_port))
    # These extensions get installed into the template1 database, so all new databases are created with them
    global_extensions: [pgcrypto]
    rds: true
    databases:
    - { name: rds_broker, extensions: [pgcrypto], ignore_existing: true }
  - name: bosh
    admin_username: ((bosh_db_admin_username))
    admin_password: ((bosh_db_admin_password))
    admin_database: postgres
    postgresql_host: ((bosh_db_dns))
    postgresql_port: ((bosh_db_port))
    rds: true
    databases:
    # We don't want to backup the Bosh database.  IF we need to backup a CF instance, we can just backup the CF databases & blobs
    # then restore them with a new Bosh. We only use RDS for HA
    - { name: bosh, username: bosh, password: ((bosh_db_password)), extensions: [pgcrypto,citext], no_restore: true, ignore_existing: true }
  - name: cloudfoundry
    admin_username: ((cf_db_admin_username))
    admin_password: ((cf_db_admin_password))
    admin_database: postgres
    postgresql_host: ((cf_db_dns))
    postgresql_port: ((cf_db_port))
    rds: true
    databases:
    - { name: ccdb, username: ccadmin, password: ((cc_db_password)), extensions: [pgcrypto,citext], ignore_existing: true }
    # The Diego DB only contains transient data, eg auction allocation status
    - { name: diego, username: diego, password: ((diego_db_password)), extensions: [pgcrypto,citext], no_restore: true, ignore_existing: true }
    - { name: uaadb, username: uaaadmin, password: ((uaa_db_password)), extensions: [pgcrypto,citext], ignore_existing: true }
    - { name: locket, username: locket, password: ((locket_db_password)), extensions: [pgcrypto,citext], ignore_existing: true }
